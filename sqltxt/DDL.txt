--스키마 == 물리적 저장공간 기본적으로 사용자 단위

--select * from hr.employees 다른 스키마에 접속할려면 이름.테이블명을 하면 가능
/*
CREATE | 데이터베이스 객체 생성
DROP   | 데이터베이스 객체 삭제
ALTER  | 데이터베이스 객체 변경
*/
/*
-- 테이블 생성
CREATE TABLE [schema.]테이블명(
컬럼명1 데이터타입 [디폴트값] [컬럼제약조건],
컬럼명2 데이터타입 [디폴트값] [컬럼제약조건],
[컬럼명n 데이터타입 [디폴트값] [컬럼제약조건]]
)
-- 시퀀스 생성
CREATE SEQUENCE 시퀀스명;
-- 뷰 생성
CREATE VIEW 뷰명;
-- 인덱스 생성
CREATE INDEX 인덱스명;
*/
/*
CHAR(size) size 바이트 크기의 고정 길이 문자 데이터 타입 (최소크기: 1바이트, 최대크기: 2,000바이트)

VARCHAR2(size) size 바이트 크기의 가변 길이 문자 데이터 타입 (최소크기: 1바이트, 최대크기: 4,000바이트)

NUMBER(precision, scale)
--------------------------------------------------------------------------------
숫자를 저장하기 위한 데이터 타입 (소수점 포함 전체 precision자리 중 소수점 이하 s자리)
(precision: 1~38, scale: -84~127)
scale를 생략한 채 precision만 지정하면 소수점 이하는 반올림되어 정수가 저장되며,
precision, scale 모두 생략하면 입력한 숫자 만큼 공간이 할당
--------------------------------------------------------------------------------

DATE 날짜 및 시간 데이터를 저장하기 위한 데이터 타입(7Byte)
LONG 가변 길이 문자 데이터 타입(1~2GB)
CLOB 대용량의 텍스트 데이터 저장을 위한 데이터 타입(1~4GB)
BLOB 대용량의 이진 데이터 저장을 위한 데이터 타입(1~4GB)
이미지나 영상은 잘 저장 안해놓음 보통 따로 저장한다.
*/

/*
CREATE TABLE departments2(
deptno NUMBER CONSTRAINT deptno_pk PRIMARY KEY, --제약사항은 옵션
dname VARCHAR2(40),
loc VARCHAR2(50)) ;
*/

/*CREATE TABLE person(
     hiredate DATE DEFAULT SYSDATE);*/

--테이블 구조와 제약사항은 분리해서 만드는게 좋음
CREATE TABLE person(
    ssn CHAR(13) CONSTRAINT person_ssn_pk NOT NULL,
    name VARCHAR2(10) NOT NULL,
    age NUMBER(3) CONSTRAINT person_age_ck CHECK(age BETWEEN 10 AND 100),
    manager number(6) CONSTRAINT person_mg_fk REFERENCES employees(employee_id),
    email VARCHAR2(50) CONSTRAINT person_email_uk UNIQUE,
    gender CHAR(1) CONSTRAINT person_gender_ck CHECK(gender IN ('M','F')),
    hiredate DATE DEFAULT SYSDATE);
    
select * from user_tables;

select * from user_constraints
where table_name = 'PERSON';

--테이블 삭제
drop table person;
drop table sawon;
--테이블 생성 시 NOT NULL 제약조건만 추가하고, 테이블 변경(ALTER) 명령어를 이용하여 제약조건을 추가한다
CREATE TABLE sawon (
id NUMBER(5),
name VARCHAR2(10) NOT NULL,
gender CHAR(1) NOT NULL,
hiredate DATE DEFAULT SYSDATE,
manager_id NUMBER(6)
);

SELECT * FROM user_constraints
WHERE table_name = 'SAWON';

/* #2. 생성된 테이블에 제약조건 추가  ALTER, ADD*/
ALTER TABLE sawon
ADD ( CONSTRAINT sawon_id_pk PRIMARY KEY(id),
CONSTRAINT sawon_gender_ck CHECK (gender IN('M', 'F')),
CONSTRAINT sawon_mgid_fk FOREIGN KEY(manager_id) REFERENCES
employees(employee_id));

SELECT * FROM user_constraints
WHERE table_name = 'SAWON';

/* #3. 개발 편의를 위한 제약조건 비활성화/활성화 */
ALTER TABLE sawon
DISABLE CONSTRAINT sawon_id_pk CASCADE --참조하는 다른 것들도 비활성화 시키기
DISABLE CONSTRAINT sawon_gender_ck
DISABLE CONSTRAINT sawon_mgid_fk;

ALTER TABLE sawon
ENABLE CONSTRAINT sawon_id_pk
ENABLE CONSTRAINT sawon_gender_ck
ENABLE CONSTRAINT sawon_mgid_fk;

select *
from sawon;
--hiredate는 default가 있기에 굳이 안해도 가능 
insert into sawon(id, name, gender,manager_id)
VALUES(1,'정충효','M',110);

create table emp3
as 
select * from employees
where 0=1;

select * from emp3;

drop table emp3;

--참조하고 있으면 drop이 안됌 그래서 CASCADE CONSTRAINTS

--drop은 하나하나씩 삭제한다고 하면 TRUNCATE는 테이블 구조 전체를 들어냄 단 메모리 공간이 사라짐
--인덱스 또한 한번에 날려버림 하지만 외래키가 참조중인 테이블은 TRUNCATE할 수 없음

create sequence test_seq;

insert into sawon(id,name,gender,manager_id) values(test_seq.nextval,'jack','M',110);
select * from sawon;

select * from user_sequences;
-- 뷰는 복잡한 질의를 간소화하거나, 보안상 직접적으로 테이블 접근을 제한하기 위해 사용한다.

select * from user_views;

select * from emp_details_view;

--10번 부서의 사원 정보만 조회할 수 있는 뷰 생성
CREATE OR REPLACE view emp_view
as select employee_id, last_name,department_id
from employees
where department_id = 10;

--딕셔너리 조회
select * from emp_view;

--10번 부서의 사원에 대해서만 insert,update 할 수 있는 뷰 생성
create or replace view emp_view
as select employee_id,last_name, email,hire_date,job_id,department_id
from employees
where department_id = 10
with check option;

insert into emp_view (employee_id,last_name,email,hire_date,job_id,department_id)
values (employees_seq.nextval,'jack','jack@korea.com',sysdate,'AD_VP',10);

--INSERT ERROR
insert into emp_view (employee_id,last_name,email,hire_date,job_id,department_id)
values (employees_seq.nextval,'jack','jack@korea.com',sysdate,'AD_VP',20);


--읽기 전용 뷰 생성
create or replace view emp_view
as select employee_id,last_name, email,hire_date,job_id,department_id
from employees
where department_id = 10
with READ ONLY;

--INSERT ERROR
insert into emp_view (employee_id,last_name,email,hire_date,job_id,department_id)
values (employees_seq.nextval,'jack','jack@korea.com',sysdate,'AD_VP',10);

CREATE OR REPLACE VIEW emp_view
    AS SELECT e.employee_id id,
            e.first_name name,
            j.job_title,
            d.department_name dname,
            l.city city
        FROM employees e
            JOIN jobs j
                ON e.job_id = j.job_id
            JOIN departments d
                ON e.department_id = d.department_id
            JOIN locations l
                ON d.location_id = l.location_id;
                
select * from emp_view;

--보안을 위한 직급별 뷰 생성
create or replace view emp_jjang_view
as select * from employees;

create or replace view emp_bujang_view
as select employee_id,first_name,salary
from employees;

select *
from emp_jjang_view;

select *
from emp_bujang_view;
------------------------------------------------------
select *
from user_indexes
where table_name = 'EMPLOYEES';

--인덱스에서 사용하는 가상컬럼(rowid) 조회
select rowid, employee_id
from employees;

--수동 인덱스 생성
create index emp_salary_idx
on employees(salary);

select employee_id, last_name,salary
from employees
where salary between 10000 and 12000;

--자동 인덱스 사용
select employee_id,last_name,salary
from employees
where email='JSEO';
--시노님(SYNONYM)==동의어 데이터베이스 객체에 대한 참조 
-- select 처럼 별칭을 쓰는것 유지보수하기 좋다.